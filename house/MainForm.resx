<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="tmrPaint.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAMDAAAAEACACoDgAAFgAAACgAAAAwAAAAYAAAAAEACAAAAAAAgAoAAAAAAAAAAAAAAAEAAAAA
        AAD///8AzO7uAN3d7gDdzO4AzN3/AMzd7gCZ/5kAmf+IAJnumQCqu90AqrvMAKqqzACqmf8AmbvMAJmZ
        zACZiMwAu6q7ALuqqgCqu7sAqruqAKqquwCqqqoAqpm7AJmquwCZqqoAmZm7AJmZqgCImbsAmZmZAJmZ
        iACImZkAiIiIAIiZdwCId4gAmWZ3AJlmVQBEmcwAd4iZAHeIiABmiJkAZoiIAHeZdwB3iHcAZohmADOI
        MwAziCIAIogzACKIIgBVRN0AZmaqAHd3mQBVd6oAVWaqAFV3mQBERKoARDPuADNE7gAzM+4Ad3d3AHd3
        ZgB3ZncAZnd3AGZ3ZgBmZncAZmZmAGZ3VQBmVXcAZlVVAGZEVQBVZmYAVXdVAFVmVQBVZkQARHdEAERm
        VQBEZkQAVVVmAEREZgBVRFUAVUREAERVRABERFUAREREAGZEMwBEZjMAVUQzAERVMwBmMzMAVTMzADNm
        RAAzRGYAM1VEADNEVQAzREQAIkRVADN3MwAzZjMAM1UzADNEMwAiVTMAIlUiACJEIgAiVREAIkQRABFE
        IgAiM3cAIjNmACIiRAARIkQAMyIzADMiIgAiMzMAIjMiACIiMwAiIiIAIhEiABEzMwARIjMAESIiABEz
        EQARMwAAESIRAAAzAAAAIhEAACIAAAARIgAREQAAABERAAARAAAAABEAAAAAAAAAAAAzAAAAZgAAAJkA
        AADMAAAA/wAAAAAzAAAzMwAAZjMAAJkzAADMMwAA/zMAAABmAAAzZgAAZmYAAJlmAADMZgAA/2YAAACZ
        AAAzmQAAZpkAAJmZAADMmQAA/5kAAADMAAAzzAAAZswAAJnMAADMzAAA/8wAAAD/AAAz/wAAZv8AAJn/
        AADM/wAA//8AAAAAMwAzADMAZgAzAJkAMwDMADMA/wAzAAAzMwAzMzMAZjMzAJkzMwDMMzMA/zMzAABm
        MwAzZjMAZmYzAJlmMwDMZjMA/2YzAACZMwAzmTMAZpkzAJmZMwDMmTMA/5kzAADMMwAzzDMAZswzAJnM
        MwDMzDMA/8wzAAD/MwAz/zMAZv8zAJn/MwDM/zMA//8zAAAAZgAzAGYAZgBmAJkAZgDMAGYA/wBmAAAz
        ZgAzM2YAZjNmAJkzZgDMM2YA/zNmAABmZgAzZmYAZmZmAJlmZgDMZmYA/2ZmAACZZgAzmWYAZplmAJmZ
        ZgDMmWYA/5lmAADMZgAzzGYAZsxmAJnMZgDMzGYA/8xmAAD/ZgAz/2YAZv9mAJn/ZgDM/2YA//9mAAAA
        mQAzAJkAZgCZAJkAmQDMAJkA/wCZAAAzmQAzM5kAZjOZAJkzmQDMM5kA/zOZAABmmQAzZpkAZmaZAJlm
        mQDMZpkAKR8gHykfIB8pHyAfKR8gHykfIB8pHyAfKT5BHykfQT4pHyAfKR8gHykfIB8pHyAfPitAKz4r
        QEY+K0ArPitAKz4rQCs+GBUVFytAGBcYQCs+K0ArPitAKz4rQCs+K0ArK0tUUFRLYFZgYWRlYGVnZVRL
        VFAYFBUVGEtJFRUVGBRJR0ZISUdGSElHRkhJR0ZIgkZLS0phZWhlaGVoZWhiYHthYWBbYWFgSksXS0pL
        S0tQWVBZUFlQWVBZUFlQWVCCgjtJS0llZnWAeHp4Z2VmZWRlZmFgISpLKhQVSxgUSUtJSElLS0hJS0lI
        SUtJSCuCgoJFS0tLYV6AS1BgYWNiZWFhYWFhKhlLS0sZSxcYS0tLS0tLS0tLS0tLS0tLRoKCgoIrSElL
        SX6AS0lISUtJSElLSUhJS0kVSRVJSElLSUhJS0lISUtJSElLSUhJO4KCgnp3enuAgIB7gIB6e3p3S0pL
        S0tKSxUYShgXFUpLS3p/end6f3p3en96d3pFgoKCgniCeIB4eoCAeHp4enhTeFVXXFpcTVxaXE1cWlxN
        aSx6flN4en5TgIBXgEsrgoKCCC95enl6anp5RXl6gHpfehcYWjU0XGx1bHRsWjQ1WoB5BRl6X3oALXlY
        S4CCgoKCLV96foBfXl9Ady1+gACAFAAUXIKCWnRrdGt0TYKCXF8YFAAAQD8YXwBXSYKCgoKCgnp3L4J6
        d4B/gIB6e4B3GD8FWoKCWmx0bHVsXIKCWkUAGAAYBBgXGBlYgoKCgoKCel96eC1+LYB6eHwXengBeBgA
        XIKCTXRrdHF0WoKCXBcYFAEARQIAAkWCgoKCgoKCgoJ5egh6gi1fRYGAgHp5egIYWoKCXGx1bHRsWoKC
        WhgXGBkAFxgZGAJYgoKCgoKCggYtX3p3enh6dy14gHcFFBgAXIKCWnReXl50TYKCXAAYAAAAGD8YAAFX
        goKCgoKCCC53goJ6d4B/eoCAfxh3AAAYWoKCWmwkbF5sXIKCWgAZGBdFABgXGACCgoKCgoKCLYJ6LIII
        elcteICAgBQAPxgAXIKCTXReXl50WoKCXAIAQEUAAEAYPxiCgoKCgoKCgoJ5enkveXp5el96eQUAGBcY
        WoKCXGx1bHRsWoKCWgU/GABFFxg/AABYgoKCgoKCeoJ6eHp3enh6d4B+AHdFAAEUXIKCWnRrdGt0TYKC
        XAIBFABAGBQAQBg/goKCgoKCCHqCL18ugnp/AHeAexgAAD8AWoKCWmx0bHVsXIKCWgUZBQAAAEUARRlF
        goKCgoKCgoJ6LIJ4LSx6Uno6Hho9Gj0RXIKCTXRrdHF0WoKCXBo9Oj1SEzoTUj1XgoKCgoKCggZfLYJ6
        eVg8L4GAeW88UTxFWoKCXFpaWlxaWoKCWlFRPlE9bVJRUVGCgoKCgoKCgoIteHp3gH6AV3p4U1pcTVxa
        goKCcYKCgoKCcYKCgk1cWlxNXFpcTVyCgoKCgoKCgoKCLwh6gnp/gIB6c3ZzdnN2c3ZzdnN2c3ZzdnN2
        c3ZzdnN2c3ZzdnOCgoKCgoKCgoJTVy1feoAjeC14IwsKCQ0LUAkNCwoJDQsKCQ0LNTMNCwoJDQsKCQ0x
        XFpcTVyCgoIAWIIGInpfenkteQAAAABSWgAAAAAAAAAAAAAAWlIAAAAAAAAAHByCMl2CXFqCgoKCAFOC
        LV8tXy1fAAAAABJOXAAAAAAAAAAAAAAAXE8SAAAAAAAdHCaCXYJcWoKCgoKCgl9Ydy97ehweAAAAAFEU
        WgAAAAAAAAAAAAAAWhJRAAAAABwcJzJdglxagoKCgoKCgoIALXh6Q3ocfQAAEFAAXAAAAAAAAAAAAAAA
        XABQEAAAHRwmMl2CXFqCgoKCgoKCgl8vAHqCekQlHB4AUhAANDU0NTQ1NDU0NTQ1NAAQUgAcHCgyXYJc
        WoKCgoKCgoKCgoIGLXhTd3pMJhwmbgAAXIKCa4KCNYKCa4KCXAAATiYcJjJdglxagoKCgoKCgoKCgoKC
        XxV7WIJdTCdyJgAAWoKCb4KCNIKCdIKCWgAAJnInMl2CXFqCgoKCgoKCgoKCgoKCB3iCAFOCXUyCHB0A
        XIKCa4KCNYKCa4KCXAAdHHAyXYJcWoKCgoKCgoKCgoKCgoKCgnqCggBagoJMJRwegm9rb2tvNG9rb2tv
        WhwcKDJdglyCgoKCgoKCgoKCgoKCgoKCgniCgoIAXIJdTCYcgoKCa4KCNYKCa4KCXBwmMl2CXFqCgoKC
        goKCgoKCgoKCgoKCgoKCgoKCAFqCXUwngoKCb4KCNIKCdIKCgicyXYJcWmuCgoKCgoKCgoKCgoKCgoKC
        goKCgoKCggBcgl1MgoKCgoKCNYKCa4KCgjJdglxaazeCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoIAWoJd
        goKCglpaNFxagoKCgl2CXFprNjaCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCAFyCXUwmHB0AAAAdHBwy
        XYJcWmswGWuCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCggBagl1MJxweABwcJzJdglxaRQ9FQjaCgoKC
        goKCgoKCgoKCgoKCgoKCgoKCgoKCgoIAXIJdTCYcHRwmMl2CXFpFN0U2GzeCgoKCgoKCgoKCgoKCgoKC
        goKCgoKCgoKCgoKCAFqCXUwlHCgyXYJcWoIMOTYbQjmCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKC
        ggBcgl1MJjJdglxagoIFDjgWNg6CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoIAWoJdTF2CXFqC
        goIANjZFDzaCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCAFyCXYJcWoKCgoIAABkDAIJFgoKC
        goKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCggBaglxagoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKC
        goKCgoKCgoKCgoKCgoKCgoIAXFqCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKC
        goKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCAAAAAAAA//8AAAAAAAD//wAAAAAAAP//gAAAAAAB
        //+AAAAAAAH//8AAAAAAA///wAAAAAAD//+AAAAAAAf//6AAAAAAB///AAAAAAAP//8AAAAAAB///4gA
        AAAAP///AAAAAAA////CAAAAAD///4AAAAAAP///GAAAAAA///9IAAAAAD///8AAAAAAP///QAAAAAA/
        //8iAAAAAD///8gAAAAAP///iAAAAAA////AAAAAAD///8AAAAAAAf//wAAAAAAB///AAAAAAAH//+AA
        AAAAA///8AAAAAAH///4AAAAAA////AAAAAAH///+AAAAAA////8AAAAAH////yAAAAA/////sAAAAH/
        ///+4AAAAf/////wAAAB//////gAAAH//////AAAAf/////+AAAB//////8AAAH//////4AAAf//////
        wAEB///////gAwH///////AHAf//////+A8F///////8H/////////4/////////////////
</value>
  </data>
</root>